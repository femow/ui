(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[621],{5793:(t,e,n)=>{"use strict";n.r(e),n.d(e,{frontMatter:()=>l,contentTitle:()=>p,metadata:()=>u,toc:()=>d,default:()=>c});var o=n(2122),a=n(9756),r=(n(7294),n(3905)),i=n(8818),s=["components"],l={},p=void 0,u={unversionedId:"Button",id:"Button",isDocsHomePage:!1,title:"Button",description:"An abstract button component for creating accessible buttons regardless of the HTML",source:"@site/docs/Button.mdx",sourceDirName:".",slug:"/Button",permalink:"/ui/Button",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Getting Started",permalink:"/ui/"},next:{title:"Dropdown",permalink:"/ui/Dropdown"}},d=[{value:"<code>useButtonProps</code>",id:"usebuttonprops",children:[]},{value:"Styling",id:"styling",children:[]}],m={toc:d};function c(t){var e=t.components,l=(0,a.Z)(t,s);return(0,r.kt)("wrapper",(0,o.Z)({},m,l,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"An abstract button component for creating accessible buttons regardless of the HTML\nelement used to render it."),(0,r.kt)(i.default,{imports:function(){return(0,i.allValues)({"@restart/ui":n.e(592).then(n.bind(n,6352))})},mdxType:"ImportContext"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx button-example",metastring:"live className=button-example",live:!0},'import { Button } from "@restart/ui";\n\n<Button>I\'m a Button</Button>;\n'))),(0,r.kt)("p",null,"Not very impressive on its own, but ",(0,r.kt)("inlineCode",{parentName:"p"},"Button")," does come with a few conveniences\nover the plain HTML element."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type")," defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"button")),(0,r.kt)("li",{parentName:"ul"},"Ensures that non ",(0,r.kt)("inlineCode",{parentName:"li"},"button")," ",(0,r.kt)("inlineCode",{parentName:"li"},"as")," options remain accessible"),(0,r.kt)("li",{parentName:"ul"},"contextually renders an ",(0,r.kt)("inlineCode",{parentName:"li"},"<a>")," if href or other anchor props are added.")),(0,r.kt)(i.default,{imports:function(){return(0,i.allValues)({"@restart/ui":n.e(592).then(n.bind(n,6352))})},mdxType:"ImportContext"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx button-example",metastring:"live className=button-example",live:!0},'import { Button } from "@restart/ui";\n\n<div className="space-x-4">\n  <Button>I\'m a Button</Button>\n  <Button href="/home">I\'m a link</Button>\n  <Button as="span">I\'m a span but also a button</Button>\n</div>;\n'))),(0,r.kt)("h3",{id:"usebuttonprops"},(0,r.kt)("inlineCode",{parentName:"h3"},"useButtonProps")),(0,r.kt)("p",null,"Most of the heavy lifting in Button comes from the ",(0,r.kt)("inlineCode",{parentName:"p"},"useButtonProps")," hook. You\ncan use the hook directly to turn any component into an accessible button."),(0,r.kt)("p",null,"If an explicit ",(0,r.kt)("inlineCode",{parentName:"p"},"tagName")," isn't provided, the hook will pick between 'button' and 'a'\ndepending on whether any anchor specific options, like ",(0,r.kt)("inlineCode",{parentName:"p"},"href"),", were provided."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useButtonProps } from \'Button\'\n\n\nfunction CompanyButton(props) {\n  const [ariaButtonProps, { tagName: Tag }] = useButtonProps(props);\n\n  return <Tag {...props} {...ariaButtonProps} />\n}\n\n<div className="space-x-4">\n  <CompanyButton>Hey there<CompanyButton>\n  <CompanyButton href="/home">I\'m a link</CompanyButton>\n</div>;\n')),(0,r.kt)("h2",{id:"styling"},"Styling"),(0,r.kt)("p",null,"Styling options are straightforward for ",(0,r.kt)("inlineCode",{parentName:"p"},"Button")," below is a minimal example using TailwindCSS.\nThere is one caveat around styling the button's disabled state. Styling should be based off\nof ",(0,r.kt)("inlineCode",{parentName:"p"},"disabled")," prop directly as opposed to using a ",(0,r.kt)("inlineCode",{parentName:"p"},":disabled")," CSS selector.\nThis is because the button may render an HTML element that does not support\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"disabled")," attribute (such as an ",(0,r.kt)("inlineCode",{parentName:"p"},"<a>"),"). Alternatively, you can select for ",(0,r.kt)("inlineCode",{parentName:"p"},"[aria-disabled='true']"),"\nin addition to ",(0,r.kt)("inlineCode",{parentName:"p"},":disabled"),"."),(0,r.kt)(i.default,{imports:function(){return(0,i.allValues)({"@restart/ui":n.e(592).then(n.bind(n,6352)),clsx:n.e(592).then(n.bind(n,6010))})},mdxType:"ImportContext"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'import { Button } from "@restart/ui";\nimport clsx from "clsx";\n\nfunction StyledButton(props) {\n  return (\n    <Button\n      {...props}\n      className={clsx(\n        props.className,\n        "transition text-md",\n        "h-10 bg-white border border-primary text-primary rounded px-8 mt-4 appearance-none text-center whitespace-no-wrap",\n        "focus:outline-none focus:ring-4 ring-primary-200",\n        !props.disabled &&\n          "cursor-pointer hover:bg-primary hover:text-white",\n        "active:bg-primary-600 active:text-white",\n        props.disabled && "cursor-not-allowed opacity-60"\n      )}\n    />\n  );\n}\n\n<div className="space-x-4">\n  <StyledButton>Button</StyledButton>\n  <StyledButton disabled>Disabled</StyledButton>\n</div>;\n'))))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXRzL2pzLzZkMGZjZTdhLjEwNDI3ZTlkLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktd2Vic2l0ZS9hc3NldHMvanMvNmQwZmNlN2EuMTA0MjdlOWQuanMiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9