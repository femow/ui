(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{83:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return d})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return p})),t.d(n,"default",(function(){return m}));var o=t(3),a=t(7),i=(t(0),t(96)),l=t(98),r=t.n(l),d={},s={unversionedId:"Modal",id:"Modal",isDocsHomePage:!1,title:"Modal",description:"Love them or hate them, `` provides a solid foundation for creating dialogs,",source:"@site/docs/Modal.mdx",slug:"/Modal",permalink:"/ui/Modal",version:"current",sidebar:"docs",previous:{title:"Dropdown",permalink:"/ui/Dropdown"},next:{title:"Navs and tabs",permalink:"/ui/Nav"}},p=[],c={toc:p};function m(e){var n=e.components,d=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},c,d,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Love them or hate them, ",Object(i.b)("inlineCode",{parentName:"p"},"<Modal />")," provides a solid foundation for creating dialogs,\nlightboxes, or whatever else. The ",Object(i.b)("inlineCode",{parentName:"p"},"Modal")," component renders its ",Object(i.b)("inlineCode",{parentName:"p"},"children")," node in front\nof a backdrop component."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"Modal")," offers a few helpful features over using just a ",Object(i.b)("inlineCode",{parentName:"p"},"<Portal/>")," component and\nsome styles:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Manages dialog stacking when one-at-a-time just isn't enough."),Object(i.b)("li",{parentName:"ul"},"Creates a backdrop for disabling interaction below the modal."),Object(i.b)("li",{parentName:"ul"},"Properly manages focus; moving to the modal content, and keeping it there until\nthe modal is closed."),Object(i.b)("li",{parentName:"ul"},"Disables scrolling of the page content while open."),Object(i.b)("li",{parentName:"ul"},"Adds the appropriate ARIA roles automatically."),Object(i.b)("li",{parentName:"ul"},"Allows easily-pluggable animations via a ",Object(i.b)("inlineCode",{parentName:"li"},"<Transition/>")," component.")),Object(i.b)("p",null,"Note that, in the same way the backdrop element prevents users from clicking or\ninteracting with the page content underneath the ",Object(i.b)("inlineCode",{parentName:"p"},"Modal"),", screen readers also need to\nbe signaled to not to interact with page content while the ",Object(i.b)("inlineCode",{parentName:"p"},"Modal")," is open. To do this,\nwe use a common technique of applying the ",Object(i.b)("inlineCode",{parentName:"p"},'aria-hidden="true"')," attribute to the\nnon-modal elements in the ",Object(i.b)("inlineCode",{parentName:"p"},"Modal")," ",Object(i.b)("inlineCode",{parentName:"p"},"container"),". This means that for a ",Object(i.b)("inlineCode",{parentName:"p"},"Modal")," to be\ntruly modal, it should have a ",Object(i.b)("inlineCode",{parentName:"p"},"container")," that is ",Object(i.b)("em",{parentName:"p"},"outside")," your app's React hierarchy\n(such as the default ",Object(i.b)("inlineCode",{parentName:"p"},"document.body"),")."),Object(i.b)(r.a,{imports:function(){return Object(l.allValues)({"@emotion/styled":Promise.all([t.e(0),t.e(5),t.e(3)]).then(t.bind(null,151)),"@restart/ui":Promise.all([t.e(0),t.e(5),t.e(3)]).then(t.bind(null,93)),"../src/Button":Promise.all([t.e(0),t.e(5),t.e(3)]).then(t.bind(null,108))})},mdxType:"ImportContext"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx",metastring:"live renderAsComponent",live:!0,renderAsComponent:!0},'import styled from "@emotion/styled";\nimport { Modal } from "@restart/ui";\nimport Button from "../src/Button";\n\nlet rand = () => Math.floor(Math.random() * 20) - 10;\n\nconst Backdrop = styled("div")`\n  position: fixed;\n  z-index: 1040;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: #000;\n  opacity: 0.5;\n`;\n\n// we use some pseudo random coords so nested modals\n// don\'t sit right on top of each other.\nconst RandomlyPositionedModal = styled(Modal)`\n  position: fixed;\n  width: 400px;\n  z-index: 1040;\n  top: ${() => 50 + rand()}%;\n  left: ${() => 50 + rand()}%;\n  border: 1px solid #e5e5e5;\n  background-color: white;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);\n  padding: 20px;\n`;\n\nfunction ModalExample() {\n  const [show, setShow] = useState(false);\n\n  const renderBackdrop = (props) => <Backdrop {...props} />;\n\n  return (\n    <div className="modal-example">\n      <Button\n        className="mb-4"\n        onClick={() => setShow(true)}\n      >\n        Open Modal\n      </Button>\n      <p>Click to get the full Modal experience!</p>\n\n      <RandomlyPositionedModal\n        show={show}\n        onHide={() => setShow(false)}\n        renderBackdrop={renderBackdrop}\n        aria-labelledby="modal-label"\n      >\n        <div>\n          <h4 id="modal-label">Text in a modal</h4>\n          <p>\n            Duis mollis, est non commodo luctus, nisi erat\n            porttitor ligula.\n          </p>\n          <ModalExample />\n        </div>\n      </RandomlyPositionedModal>\n    </div>\n  );\n}\n\n<ModalExample />;\n'))))}m.isMDXComponent=!0}}]);