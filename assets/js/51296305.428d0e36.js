(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{80:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return p})),t.d(n,"default",(function(){return u}));var o=t(3),r=t(7),a=(t(0),t(96)),i=t(98),c=t.n(i),l={},s={unversionedId:"Portal",id:"Portal",isDocsHomePage:!1,title:"Portal",description:'The `` component renders its children into a new "subtree" outside of current component hierarchy.',source:"@site/docs/Portal.mdx",slug:"/Portal",permalink:"/ui/Portal",version:"current",sidebar:"docs",previous:{title:"Overlay",permalink:"/ui/Overlay"},next:{title:"Waypoint",permalink:"/ui/Waypoint"}},p=[],d={toc:p};function u(e){var n=e.components,l=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},d,l,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"<Portal/>"),' component renders its children into a new "subtree" outside of current component hierarchy.\nYou can think of it as a declarative ',Object(a.b)("inlineCode",{parentName:"p"},"appendChild()"),", or jQuery's ",Object(a.b)("inlineCode",{parentName:"p"},"$().appendTo()"),".\nThe children of ",Object(a.b)("inlineCode",{parentName:"p"},"<Portal/>")," component will be appended to the ",Object(a.b)("inlineCode",{parentName:"p"},"container")," specified."),Object(a.b)("p",null,"The component is a light wrapper around ",Object(a.b)("inlineCode",{parentName:"p"},"React.createPortal")," with some conveniences around\nspecifying and waiting for the container element."),Object(a.b)(c.a,{imports:function(){return Object(i.allValues)({"@restart/ui":t.e(0).then(t.bind(null,93))})},mdxType:"ImportContext"},Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js",metastring:"live renderAsComponent",live:!0,renderAsComponent:!0},'import { Portal } from "@restart/ui";\n\nconst [show, setShow] = useState(false);\nconst containerRef = useRef(null);\n\nlet child = <span>But I actually render here!</span>;\n\n<div className="flex flex-col items-center">\n  <button\n    type="button"\n    className="btn"\n    onClick={() => setShow(true)}\n  >\n    Render Child\n  </button>\n  <div className="bg-brand-200 p-6 rounded-lg shadow my-4">\n    <span>It looks like I will render in here.</span>\n\n    <Portal container={containerRef}>\n      {show && child}\n    </Portal>\n  </div>\n\n  <div\n    className="bg-brand-200 p-6 rounded-lg shadow "\n    ref={containerRef}\n  />\n</div>;\n'))))}u.isMDXComponent=!0}}]);