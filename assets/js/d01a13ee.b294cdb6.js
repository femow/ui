(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[425],{9188:(e,n,t)=>{"use strict";t.r(n),t.d(n,{frontMatter:()=>s,contentTitle:()=>d,metadata:()=>p,toc:()=>m,default:()=>c});var o=t(2122),a=t(9756),l=(t(7294),t(3905)),i=t(8818),r=["components"],s={},d=void 0,p={unversionedId:"Modal",id:"Modal",isDocsHomePage:!1,title:"Modal",description:"Love them or hate them, `` provides a solid foundation for creating dialogs,",source:"@site/docs/Modal.mdx",sourceDirName:".",slug:"/Modal",permalink:"/ui/Modal",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Dropdown",permalink:"/ui/Dropdown"},next:{title:"Navs and tabs",permalink:"/ui/Nav"}},m=[{value:"Example",id:"example",children:[]},{value:"Modal stacking",id:"modal-stacking",children:[]}],u={toc:m};function c(e){var n=e.components,s=(0,a.Z)(e,r);return(0,l.kt)("wrapper",(0,o.Z)({},u,s,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Love them or hate them, ",(0,l.kt)("inlineCode",{parentName:"p"},"<Modal />")," provides a solid foundation for creating dialogs,\nlightboxes, or whatever else. The ",(0,l.kt)("inlineCode",{parentName:"p"},"Modal")," component renders its ",(0,l.kt)("inlineCode",{parentName:"p"},"children")," node in front\nof a backdrop component."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Modal")," offers a few helpful features over using just a ",(0,l.kt)("inlineCode",{parentName:"p"},"<Portal/>")," component and\nsome styles:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Manages dialog stacking when one-at-a-time just isn't enough."),(0,l.kt)("li",{parentName:"ul"},"Creates a backdrop for disabling interaction below the modal."),(0,l.kt)("li",{parentName:"ul"},"Properly manages focus; moving to the modal content, and keeping it there until\nthe modal is closed."),(0,l.kt)("li",{parentName:"ul"},"Disables scrolling of the page content while open."),(0,l.kt)("li",{parentName:"ul"},"Ensuring modal content is accessible with the appropriate ARIA."),(0,l.kt)("li",{parentName:"ul"},"Allows easily-pluggable animations via a ",(0,l.kt)("inlineCode",{parentName:"li"},"<Transition/>")," component.")),(0,l.kt)("h2",{id:"example"},"Example"),(0,l.kt)(i.default,{imports:function(){return(0,i.allValues)({"@restart/ui":Promise.all([t.e(592),t.e(867),t.e(249)]).then(t.bind(t,6352)),"../src/Button":Promise.all([t.e(592),t.e(867),t.e(249)]).then(t.bind(t,5733))})},mdxType:"ImportContext"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'import { Modal } from "@restart/ui";\nimport Button from "../src/Button";\n\nfunction Example() {\n  const [show, setShow] = useState(false);\n\n  return (\n    <div>\n      <Button onClick={() => setShow(true)}>\n        Open Modal\n      </Button>\n\n      <Modal\n        show={show}\n        aria-labelledby="modal-1-label"\n        onHide={() => setShow(false)}\n        renderBackdrop={(props) => (\n          <div\n            {...props}\n            className="fixed inset-0 bg-black/30 z-[300]"\n          />\n        )}\n        className="fixed z-[301] top-1/2 left-1/2 transform -translate-y-1/2 -translate-x-1/2 bg-white shadow-lg p-5"\n      >\n        <div>\n          <h4 id="modal-1-label">Alert!</h4>\n          <p>Some important content!</p>\n          <Button\n            onClick={() => setShow(false)}\n            className="float-right"\n          >\n            Close\n          </Button>\n        </div>\n      </Modal>\n    </div>\n  );\n}\n\n<Example />;\n'))),(0,l.kt)("h2",{id:"modal-stacking"},"Modal stacking"),(0,l.kt)("p",null,"Modal supports stacking (if you really need it) out of the box."),(0,l.kt)(i.default,{imports:function(){return(0,i.allValues)({"@emotion/styled":Promise.all([t.e(592),t.e(867),t.e(249)]).then(t.bind(t,867)),"@restart/ui":Promise.all([t.e(592),t.e(867),t.e(249)]).then(t.bind(t,6352)),"../src/Button":Promise.all([t.e(592),t.e(867),t.e(249)]).then(t.bind(t,5733))})},mdxType:"ImportContext"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'import styled from "@emotion/styled";\nimport { Modal } from "@restart/ui";\nimport Button from "../src/Button";\n\nlet rand = () => Math.floor(Math.random() * 20) - 10;\n\nconst Backdrop = styled("div")`\n  position: fixed;\n  z-index: 1040;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: #000;\n  opacity: 0.5;\n`;\n\n// we use some pseudo random coords so nested modals\n// don\'t sit right on top of each other.\nconst RandomlyPositionedModal = styled(Modal)`\n  position: fixed;\n  width: 400px;\n  z-index: 1040;\n  top: ${() => 50 + rand()}%;\n  left: ${() => 50 + rand()}%;\n  border: 1px solid #e5e5e5;\n  background-color: white;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);\n  padding: 20px;\n`;\n\nfunction ModalExample() {\n  const [show, setShow] = useState(false);\n\n  const renderBackdrop = (props) => <Backdrop {...props} />;\n\n  return (\n    <div className="modal-example">\n      <Button\n        className="mb-4"\n        onClick={() => setShow(true)}\n      >\n        Open Modal\n      </Button>\n      <p>Click to get the full Modal experience!</p>\n\n      <RandomlyPositionedModal\n        show={show}\n        onHide={() => setShow(false)}\n        renderBackdrop={renderBackdrop}\n        aria-labelledby="modal-label"\n      >\n        <div>\n          <h4 id="modal-label">Text in a modal</h4>\n          <p>\n            Duis mollis, est non commodo luctus, nisi erat\n            porttitor ligula.\n          </p>\n          <ModalExample />\n        </div>\n      </RandomlyPositionedModal>\n    </div>\n  );\n}\n\n<ModalExample />;\n'))))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXRzL2pzL2QwMWExM2VlLmE4N2QxZjJmLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktd2Vic2l0ZS9hc3NldHMvanMvZDAxYTEzZWUuYTg3ZDFmMmYuanMiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9