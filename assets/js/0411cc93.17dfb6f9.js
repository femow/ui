(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{109:function(e,n,o){"use strict";var t=o(0),r=o(110);n.a=function(){const e=Object(t.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},110:function(e,n,o){"use strict";var t=o(0);const r=Object(t.createContext)(void 0);n.a=r},90:function(e,n,o){"use strict";o.r(n),o.d(n,"frontMatter",(function(){return f})),o.d(n,"metadata",(function(){return j})),o.d(n,"toc",(function(){return O})),o.d(n,"default",(function(){return v}));var t=o(3),r=o(7),a=o(0),i=o.n(a),p=o(96),l=o(98),s=o.n(l),d=o(109),c=o(91),u=o(66),b=o.n(u);const m=37,g=39;var h=function(e){const{lazy:n,block:o,defaultValue:t,values:r,groupId:p,className:l}=e,{tabGroupChoices:s,setTabGroupChoices:u}=Object(d.a)(),[h,w]=Object(a.useState)(t),f=a.Children.toArray(e.children),j=[];if(null!=p){const e=s[p];null!=e&&e!==h&&r.some((n=>n.value===e))&&w(e)}const O=e=>{const n=e.target,o=j.indexOf(n),t=f[o].props.value;w(t),null!=p&&(u(p,t),setTimeout((()=>{(function(e){const{top:n,left:o,bottom:t,right:r}=e.getBoundingClientRect(),{innerHeight:a,innerWidth:i}=window;return n>=0&&r<=i&&t<=a&&o>=0})(n)||(n.scrollIntoView({block:"center",behavior:"smooth"}),n.classList.add(b.a.tabItemActive),setTimeout((()=>n.classList.remove(b.a.tabItemActive)),2e3))}),150))},D=e=>{var n;let o;switch(e.keyCode){case g:{const n=j.indexOf(e.target)+1;o=j[n]||j[0];break}case m:{const n=j.indexOf(e.target)-1;o=j[n]||j[j.length-1];break}}null==(n=o)||n.focus()};return i.a.createElement("div",{className:"tabs-container"},i.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(c.default)("tabs",{"tabs--block":o},l)},r.map((({value:e,label:n})=>i.a.createElement("li",{role:"tab",tabIndex:h===e?0:-1,"aria-selected":h===e,className:Object(c.default)("tabs__item",b.a.tabItem,{"tabs__item--active":h===e}),key:e,ref:e=>j.push(e),onKeyDown:D,onFocus:O,onClick:O},n)))),n?Object(a.cloneElement)(f.filter((e=>e.props.value===h))[0],{className:"margin-vert--md"}):i.a.createElement("div",{className:"margin-vert--md"},f.map(((e,n)=>Object(a.cloneElement)(e,{key:n,hidden:e.props.value!==h})))))};var w=function({children:e,hidden:n,className:o}){return i.a.createElement("div",{role:"tabpanel",hidden:n,className:o},e)},f={},j={unversionedId:"Dropdown",id:"Dropdown",isDocsHomePage:!1,title:"Dropdown",description:"Dropdown is a set of structural components for building accessible dropdown menus with close-on-click,",source:"@site/docs/Dropdown.mdx",slug:"/Dropdown",permalink:"/ui/Dropdown",version:"current",sidebar:"docs",previous:{title:"Button",permalink:"/ui/Button"},next:{title:"Modal",permalink:"/ui/Modal"}},O=[{value:"Components",id:"components",children:[{value:"Dropdown",id:"dropdown",children:[]},{value:"Toggle",id:"toggle",children:[]},{value:"Menu",id:"menu",children:[]}]},{value:"Implementing show/hide",id:"implementing-showhide",children:[]},{value:"Different containers",id:"different-containers",children:[]}],D={toc:O};function v(e){var n=e.components,a=Object(r.a)(e,["components"]);return Object(p.b)("wrapper",Object(t.a)({},D,a,{components:n,mdxType:"MDXLayout"}),Object(p.b)("p",null,Object(p.b)("inlineCode",{parentName:"p"},"Dropdown")," is a set of structural components for building accessible dropdown menus with close-on-click,\nkeyboard navigation, and correct focus handling. Like all of ",Object(p.b)("inlineCode",{parentName:"p"},"@restart/ui"),"\ncomponents, it's BYOS (Bring Your Own Styles). ",Object(p.b)("inlineCode",{parentName:"p"},"Dropdown")," is primarily\nbuilt from three base components that you should compose to build your dropdowns."),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},Object(p.b)("inlineCode",{parentName:"li"},"Dropdown"),": wraps the menu and toggle, and handles keyboard navigation"),Object(p.b)("li",{parentName:"ul"},Object(p.b)("inlineCode",{parentName:"li"},"Dropdown.Toggle"),": generally a button that triggers the opening of the menu"),Object(p.b)("li",{parentName:"ul"},Object(p.b)("inlineCode",{parentName:"li"},"Dropdown.Menu"),": the overlaid menu, positioned to the toggle with ",Object(p.b)("inlineCode",{parentName:"li"},"PopperJS"))),Object(p.b)(s.a,{imports:function(){return Object(l.allValues)({clsx:Promise.all([o.e(0),o.e(19)]).then(o.bind(null,91)),"../src/Button":Promise.all([o.e(0),o.e(19)]).then(o.bind(null,108)),"@restart/ui":Promise.all([o.e(0),o.e(19)]).then(o.bind(null,93))})},mdxType:"ImportContext"},Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'import clsx from "clsx";\nimport Button from "../src/Button";\nimport {\n  useDropdownMenu,\n  useDropdownToggle,\n  useDropdownItem,\n  Dropdown,\n} from "@restart/ui";\n\nconst DropdownMenu = ({ role }) => {\n  const [props, { toggle, show, popper }] = useDropdownMenu(\n    {\n      flip: true,\n      offset: [0, 8],\n    }\n  );\n\n  useLayoutEffect(() => {\n    if (show) popper.update();\n  }, [show]);\n\n  return (\n    <div\n      {...props}\n      role={role}\n      className={clsx(\n        show ? "flex" : "hidden",\n        "w-48 py-2 flex-col shadow-lg border-gray-200 border bg-white z-10 rounded"\n      )}\n    >\n      <Dropdown.Item className="text-left hover:bg-brand-100 px-6 py-2 focus:ring-2 focus:outline-none">\n        Item 1\n      </Dropdown.Item>\n      <Dropdown.Item className="text-left hover:bg-brand-100 px-6 py-2 focus:ring-2 focus:outline-none">\n        Item 2\n      </Dropdown.Item>\n    </div>\n  );\n};\n\nconst DropdownToggle = ({ children }) => {\n  const [props, { show, toggle }] = useDropdownToggle();\n\n  return <Button {...props}>{children}</Button>;\n};\n\nconst DropdownButton = ({\n  show,\n  onToggle,\n  drop,\n  alignEnd,\n  title,\n  role,\n}) => (\n  <Dropdown\n    show={show}\n    onToggle={onToggle}\n    drop={drop}\n    alignEnd={alignEnd}\n  >\n    <span>\n      <DropdownToggle>{title}</DropdownToggle>\n      <DropdownMenu role={role} />\n    </span>\n  </Dropdown>\n);\n\nfunction DropdownExample() {\n  const [show, setShow] = useState(false);\n\n  return (\n    <div className="flex justify-center space-x-5">\n      <DropdownButton\n        show={show}\n        onToggle={(nextShow) => setShow(nextShow)}\n        title={`${show ? "Close" : "Open"} Dropdown`}\n      />\n    </div>\n  );\n}\n'))),Object(p.b)("h2",{id:"components"},"Components"),Object(p.b)("p",null,"Dropdowns are made up of a wrapping ",Object(p.b)("inlineCode",{parentName:"p"},"Dropdown")," component, a ",Object(p.b)("inlineCode",{parentName:"p"},"Toggle")," that\ntriggers that menu visibility, a ",Object(p.b)("inlineCode",{parentName:"p"},"Menu")," and the ",Object(p.b)("inlineCode",{parentName:"p"},"Item"),"s within that menu. With the exception\nof the outer ",Object(p.b)("inlineCode",{parentName:"p"},"Dropdown")," component, each sub component can be constructed with a component\nrender prop API or a hook depending on preference."),Object(p.b)("h3",{id:"dropdown"},"Dropdown"),Object(p.b)("p",null,"The ",Object(p.b)("inlineCode",{parentName:"p"},"Dropdown")," component is the non-presentational orchestrator of the dropdown state.\nIt handles menu visibility, keyboard navigation and focus management. As a convenience, a\nfew ",Object(p.b)("inlineCode",{parentName:"p"},"Menu")," specific props can be provided to ",Object(p.b)("inlineCode",{parentName:"p"},"Dropdown")," directly, such as ",Object(p.b)("inlineCode",{parentName:"p"},"placement"),". It\nis sometimes helpful to also render a wrapping DOM element around your ",Object(p.b)("inlineCode",{parentName:"p"},"Toggle")," and ",Object(p.b)("inlineCode",{parentName:"p"},"Menu"),",\nbut not it's required."),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-jsx"},"import { Dropdown } from '@restart/ui';\n\n\n<Dropdown placement='top-start'>\n  <span>\n  {/* Toggle */}\n  </span>\n<Dropdown>\n")),Object(p.b)("h3",{id:"toggle"},"Toggle"),Object(p.b)("p",null,"The ",Object(p.b)("inlineCode",{parentName:"p"},"Toggle")," is an interactive element (usually a button) that opens the dropdown menu.\nThe toggle props contain a ",Object(p.b)("inlineCode",{parentName:"p"},"ref")," that must be passed to a valid DOM element. You\ncan pass ",Object(p.b)("inlineCode",{parentName:"p"},"disabled")," and ",Object(p.b)("inlineCode",{parentName:"p"},"onClick")," props as well and they will be composed into the returned\nprops automatically."),Object(p.b)(h,{defaultValue:"hook",values:[{label:"useDropdownToggle",value:"hook"},{label:"DropdownToggle",value:"component"}],mdxType:"Tabs"},Object(p.b)(w,{value:"hook",mdxType:"TabItem"},Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-jsx"},'import { useDropdownToggle } from "@restart/ui";\nimport { Button } from "@restart/ui";\n\nconst DropdownToggle = (props) => {\n  const [toggleProps] = useDropdownToggle(props);\n\n  return <Button {...props} {...itemProps} />;\n};\n'))),Object(p.b)(w,{value:"component",mdxType:"TabItem"},Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-jsx"},'import { DropdownToggle } from "@restart/ui";\nimport { Button } from "@restart/ui";\n\nconst MyDropdownToggle = (props) => (\n  <DropdownToggle {...props}>\n    {(toggleProps, meta) => (\n      <Button {...props} {...toggleProps} />\n    )}\n  </DropdownToggle>\n);\n')))),Object(p.b)("h3",{id:"menu"},"Menu"),Object(p.b)("p",null,"The dropdown ",Object(p.b)("inlineCode",{parentName:"p"},"Menu")," provides an overlay that is positioned next to the dropdown toggle.\nMenu's are positioned with ",Object(p.b)("inlineCode",{parentName:"p"},"PopperJS")," by default, and accept all configuration options\navailable to ",Object(p.b)("inlineCode",{parentName:"p"},"Popper"),"."),Object(p.b)(h,{defaultValue:"hook",values:[{label:"useDropdownMenu",value:"hook"},{label:"DropdownMenu",value:"component"}],mdxType:"Tabs"},Object(p.b)(w,{value:"hook",mdxType:"TabItem"},Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-jsx"},'import { useDropdownMenu } from "@restart/ui";\nimport { Button } from "@restart/ui";\n\nconst DropdownToggle = (props) => {\n  const [menuProps, meta] = useDropdownMenu({\n    flip: true,\n    offset: [0, 8],\n  });\n\n  return (\n    <ul\n      {...props}\n      {...menuProps}\n      style={{\n        visibility: meta.show ? "visible" : "hidden ",\n      }}\n    />\n  );\n};\n'))),Object(p.b)(w,{value:"component",mdxType:"TabItem"},Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-jsx"},'import { DropdownMenu } from "@restart/ui";\nimport { Button } from "@restart/ui";\n\nconst MyDropdownToggle = (props) => (\n  <DropdownMenu flip offset={[0, 8]}>\n    {(menuProps, meta) => (\n      <ul\n        {...props}\n        {...menuProps}\n        style={{\n          visibility: meta.show ? "visible" : "hidden ",\n        }}\n      />\n    )}\n  </DropdownMenu>\n);\n')))),Object(p.b)("h2",{id:"implementing-showhide"},"Implementing show/hide"),Object(p.b)("p",null,"Because ",Object(p.b)("inlineCode",{parentName:"p"},"PopperJS")," must measure the ",Object(p.b)("inlineCode",{parentName:"p"},"Menu")," element, it's recommended that you style\nthe Menu with ",Object(p.b)("inlineCode",{parentName:"p"},"opacity: 0")," and ",Object(p.b)("inlineCode",{parentName:"p"},"visibility: hidden")," when not shown.\nThis allows ",Object(p.b)("inlineCode",{parentName:"p"},"Popper")," to calculate the correct offset for the ",Object(p.b)("inlineCode",{parentName:"p"},"Menu")," even when it's not\nvisible. This also makes it a bit simpler to animate if you desire."),Object(p.b)("p",null,"When transitioning, it's best to use ",Object(p.b)("strong",{parentName:"p"},"both")," ",Object(p.b)("inlineCode",{parentName:"p"},"visibility")," and ",Object(p.b)("inlineCode",{parentName:"p"},"opacity"),". Setting\n",Object(p.b)("inlineCode",{parentName:"p"},"visibility")," to ",Object(p.b)("inlineCode",{parentName:"p"},"hidden")," will remove the menu from the keyboard tab order, but it\ndoesn't transition nicely, so add ",Object(p.b)("inlineCode",{parentName:"p"},"opacity")," (or some other visual property) to\nindicate fade out and in."),Object(p.b)(s.a,{imports:function(){return Object(l.allValues)({"@restart/ui":Promise.all([o.e(0),o.e(19)]).then(o.bind(null,93))})},mdxType:"ImportContext"},Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'import { Dropdown } from "@restart/ui";\n\n<Dropdown>\n  <Dropdown.Toggle>\n    {(props) => (\n      <button {...props} className="border p-3">\n        Open\n      </button>\n    )}\n  </Dropdown.Toggle>\n  <Dropdown.Menu flip offset={[0, 8]}>\n    {(menuProps, meta) => (\n      <ul\n        {...menuProps}\n        className="p-4 border shadow-md bg-white absolute z-10"\n        style={{\n          transition: "visibility 500ms, opacity 500ms",\n          visibility: meta.show ? "visible" : "hidden",\n          opacity: meta.show ? "1" : "0",\n        }}\n      >\n        <p>Hey there</p>\n      </ul>\n    )}\n  </Dropdown.Menu>\n</Dropdown>;\n'))),Object(p.b)("p",null,"If the above isn't feasible and you must use ",Object(p.b)("inlineCode",{parentName:"p"},"display: none")," to hide the menu, you\nmay need to manually trigger a position re-calculation on show when ",Object(p.b)("inlineCode",{parentName:"p"},"Popper")," is able to\nmeasure the element."),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-jsx"},'import { useDropdownMenu } from "@restart/ui";\n\nfunction Menu() {\n  const [menuProps, meta] = useDropdownMenu();\n\n  useLayoutEffect(() => {\n    meta.update()\n  }, [meta.show])\n\n  return (\n    <ul\n      {...menuProps}\n      style={{\n        display: meta.show ? "block" : "none",\n      }}\n    >\n      {...}\n    </ul>\n  );\n}\n')),Object(p.b)("h2",{id:"different-containers"},"Different containers"),Object(p.b)("p",null,"Dropdowns use ",Object(p.b)("inlineCode",{parentName:"p"},"Popper")," by default to position ",Object(p.b)("inlineCode",{parentName:"p"},"Menu"),"s to ",Object(p.b)("inlineCode",{parentName:"p"},"Toggle"),"s. ",Object(p.b)("inlineCode",{parentName:"p"},"Popper")," is a\npowerful positioning library that lets you easily construct ",Object(p.b)("inlineCode",{parentName:"p"},"Dropdown")," markup to suit\nyour app's needs."),Object(p.b)("p",null,"The example here positions the ",Object(p.b)("inlineCode",{parentName:"p"},"Menu")," to the ",Object(p.b)("inlineCode",{parentName:"p"},"document")," body via a ",Object(p.b)("inlineCode",{parentName:"p"},"Portal"),"."),Object(p.b)(s.a,{imports:function(){return Object(l.allValues)({"@restart/ui":Promise.all([o.e(0),o.e(19)]).then(o.bind(null,93))})},mdxType:"ImportContext"},Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-js",metastring:"live",live:!0},'import { Dropdown } from "@restart/ui";\n\n<Dropdown drop="down">\n  <Dropdown.Toggle id="example-toggle">\n    {(props) => (\n      <button type="button" className="btn" {...props}>\n        Click to open\n      </button>\n    )}\n  </Dropdown.Toggle>\n  <Dropdown.Menu offset={[0, 12]}>\n    {(props, { show }) =>\n      ReactDOM.createPortal(\n        <div\n          {...props}\n          className={`${\n            show ? "flex" : "hidden"\n          } p-3 shadow-lg border-grey-200 bg-white z-10 rounded`}\n        >\n          <p>I am rendered into the document body</p>\n        </div>,\n        document.body\n      )\n    }\n  </Dropdown.Menu>\n</Dropdown>;\n'))))}v.isMDXComponent=!0}}]);