(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[25],{9059:(n,e,t)=>{"use strict";t.r(e),t.d(e,{frontMatter:()=>l,contentTitle:()=>p,metadata:()=>d,toc:()=>c,default:()=>u});var o=t(2122),i=t(9756),a=(t(7294),t(3905)),s=t(8818),r=["components"],l={title:"Animation and Transitions"},p=void 0,d={unversionedId:"transitions",id:"transitions",isDocsHomePage:!1,title:"Animation and Transitions",description:"Animation of components is handled by transition props. If",source:"@site/docs/transitions.mdx",sourceDirName:".",slug:"/transitions",permalink:"/ui/transitions",version:"current",frontMatter:{title:"Animation and Transitions"},sidebar:"docs",previous:{title:"useRootClose",permalink:"/ui/useRootClose"},next:{title:"Server Side Rendering",permalink:"/ui/SSR"}},c=[],m={toc:c};function u(n){var e=n.components,l=(0,i.Z)(n,r);return(0,a.kt)("wrapper",(0,o.Z)({},m,l,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Animation of components is handled by ",(0,a.kt)("inlineCode",{parentName:"p"},"transition")," props. If\na component accepts a ",(0,a.kt)("inlineCode",{parentName:"p"},"transition")," prop you can provide\na ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/reactjs/react-transition-group"},"react-transition-group@2.0.0"),"\ncompatible ",(0,a.kt)("inlineCode",{parentName:"p"},"Transition")," component and it will work. Feel free to use ",(0,a.kt)("inlineCode",{parentName:"p"},"CSSTransition"),"\nspecifically, or roll your own like the below example."),(0,a.kt)(s.default,{imports:function(){return(0,s.allValues)({"@restart/ui":Promise.all([t.e(592),t.e(365)]).then(t.bind(t,6352)),"react-transition-group/Transition":Promise.all([t.e(592),t.e(365)]).then(t.bind(t,2745))})},mdxType:"ImportContext"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"live",live:!0},'import { Modal, Overlay } from "@restart/ui";\nimport Transition from "react-transition-group/Transition";\n\nconst FADE_DURATION = 200;\n\ninjectCss(`\n  .fade {\n    opacity: 0;\n    transition: opacity ${FADE_DURATION}ms linear;\n  }\n\n  .show {\n    opacity: 1;\n  }\n\n\n  .backdrop.fade.show {\n    opacity: 0.5;\n  }\n\n  .dialog {\n    position: absolute;\n    width: 400;\n    top: 50%; left: 50%;\n    transform: translate(-50%, -50%);\n    border: 1px solid #e5e5e5;\n    background-color: white;\n    box-shadow: 0 5px 15px rgba(0, 0, 0, .5);\n    padding: 20px;\n  }\n`);\n\nconst fadeStyles = {\n  entering: "show",\n  entered: "show",\n};\n\nconst Fade = ({ children, ...props }) => (\n  <Transition {...props} timeout={FADE_DURATION}>\n    {(status, innerProps) =>\n      React.cloneElement(children, {\n        ...innerProps,\n        className: `fade ${fadeStyles[status]} ${children.props.className}`,\n      })\n    }\n  </Transition>\n);\n\nfunction TransitionExample() {\n  const [showModal, setShowModal] = useState(false);\n  const [showTooltip, setShowTooltip] = useState(false);\n  const [tooltipRef, attachRef] = useState(null);\n\n  return (\n    <div className="flex flex-col items-center">\n      <button\n        type="button"\n        className="btn btn-primary mr-3"\n        onClick={() => setShowModal((prev) => !prev)}\n      >\n        Show Animated Modal\n      </button>\n\n      <button\n        type="button"\n        className="btn btn-primary"\n        onClick={() => setShowTooltip((prev) => !prev)}\n        ref={attachRef}\n      >\n        Show Tooltip\n      </button>\n\n      <Overlay\n        placement="top"\n        transition={Fade}\n        show={showTooltip}\n        target={tooltipRef}\n        popperConfig={{\n          modifiers: [\n            {\n              name: "offset",\n              enabled: true,\n              options: { offset: [0, 10] },\n            },\n          ],\n        }}\n      >\n        {({ props: { ref, style } }) => (\n          <div\n            ref={ref}\n            className="bg-primary-200 shadow rounded z-10 px-4"\n            style={style}\n          >\n            Hello there\n          </div>\n        )}\n      </Overlay>\n\n      <Modal\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        transition={Fade}\n        backdropTransition={Fade}\n        renderBackdrop={(props) => (\n          <div\n            {...props}\n            className="backdrop absolute inset-0 bg-black z-40"\n          />\n        )}\n        renderDialog={(props) => (\n          <div\n            {...props}\n            className="fixed inset-0 z-50 flex items-center justify-center pointer-events-none"\n          >\n            <div className="dialog bg-white shadow rounded-lg pointer-events-auto">\n              <h4 id="modal-label">I&apos;m fading in!</h4>\n              <p>\n                Anim pariatur cliche reprehenderit, enim\n                eiusmod high life accusamus terry richardson\n                ad squid. Nihil anim keffiyeh helvetica,\n                craft beer labore wes anderson cred nesciunt\n                sapiente ea proident.\n              </p>\n              <button\n                type="button"\n                className="btn"\n                onClick={() => setShowModal(false)}\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        )}\n      />\n    </div>\n  );\n}\n\n<TransitionExample />;\n'))))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXRzL2pzL2RhNGRlNGVjLmY5ZDcyMjQwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktd2Vic2l0ZS9hc3NldHMvanMvZGE0ZGU0ZWMuZjlkNzIyNDAuanMiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9