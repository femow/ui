(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[893],{6837:(e,n,t)=>{"use strict";t.r(n),t.d(n,{frontMatter:()=>s,contentTitle:()=>p,metadata:()=>c,toc:()=>m,default:()=>d});var o=t(2122),r=t(9756),a=(t(7294),t(3905)),i=t(8818),l=["components"],s={},p=void 0,c={unversionedId:"Overlay",id:"Overlay",isDocsHomePage:!1,title:"Overlay",description:"A flexible base component for building tooltips, popups, and any other floating UI components.",source:"@site/docs/Overlay.mdx",sourceDirName:".",slug:"/Overlay",permalink:"/ui/Overlay",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Navs and tabs",permalink:"/ui/Nav"},next:{title:"Portal",permalink:"/ui/Portal"}},m=[{value:"Creating an Overlay",id:"creating-an-overlay",children:[]},{value:"Animations",id:"animations",children:[]}],u={toc:m};function d(e){var n=e.components,s=(0,r.Z)(e,l);return(0,a.kt)("wrapper",(0,o.Z)({},u,s,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A flexible base component for building tooltips, popups, and any other floating UI components.\n",(0,a.kt)("inlineCode",{parentName:"p"},"Overlay")," combines ",(0,a.kt)("a",{parentName:"p",href:"https://popper.js.org/"},"Popper"),", click-to-dismiss, and optional transitions for\nrendering floating UI relative to another element."),(0,a.kt)("h2",{id:"creating-an-overlay"},"Creating an Overlay"),(0,a.kt)("p",null,'Overlays consist of at least two elements, the "overlay", the element to be positioned,\nas well as a "target", the element the overlay is positioned in relation to. Popper\nalso provides functionality for optional tooltip "arrows" like in the example below.\nBe sure to check out the Popper documentation for more details about the underlying\npositioning engine.'),(0,a.kt)(i.default,{imports:function(){return(0,i.allValues)({clsx:Promise.all([t.e(592),t.e(471)]).then(t.bind(t,6010)),"@restart/ui":Promise.all([t.e(592),t.e(471)]).then(t.bind(t,6352)),"../src/Button":Promise.all([t.e(592),t.e(471)]).then(t.bind(t,5733))})},mdxType:"ImportContext"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live editor=collapse",live:!0,editor:"collapse"},'import clsx from "clsx";\nimport { Overlay } from "@restart/ui";\nimport Button from "../src/Button";\n\nconst PLACEMENTS = ["left", "top", "right", "bottom"];\n\nconst initialSstate = {\n  show: false,\n  placement: null,\n};\n\nfunction reducer(state, [type, payload]) {\n  switch (type) {\n    case "placement":\n      return { show: !!payload, placement: payload };\n    default:\n      return state;\n  }\n}\n\nfunction OverlayExample() {\n  const [{ show, placement }, dispatch] = useReducer(\n    reducer,\n    initialSstate\n  );\n  const triggerRef = useRef(null);\n  const containerRef = useRef(null);\n\n  const handleClick = () => {\n    const nextPlacement =\n      PLACEMENTS[PLACEMENTS.indexOf(placement) + 1];\n\n    dispatch(["placement", nextPlacement]);\n  };\n\n  return (\n    <div\n      className="flex flex-col items-center"\n      ref={containerRef}\n    >\n      <Button\n        className="mb-4"\n        id="overlay-toggle"\n        ref={triggerRef}\n        onClick={handleClick}\n      >\n        I am an Overlay target\n      </Button>\n      <p>Keep clicking to see the placement change.</p>\n\n      <Overlay\n        show={show}\n        rootClose\n        offset={[0, 10]}\n        placement={placement}\n        container={containerRef}\n        target={triggerRef}\n      >\n        {(props, { arrowProps, popper, show }) => (\n          <div {...props} className="absolute">\n            <div\n              {...arrowProps}\n              style={arrowProps.style}\n              className={clsx(\n                "absolute w-3 h-3 z-[-1]",\n                "before:absolute before:rotate-45 before:bg-black before:top-0 before:left-0 before:w-3 before:h-3",\n                popper.placement === "left" && "-right-1",\n                popper.placement === "right" && "-left-1",\n                popper.placement === "bottom" && "-top-1",\n                popper.placement === "top" && "-bottom-1"\n              )}\n            />\n            <div className="py-1 px-2 text-center rounded bg-black text-white ">\n              I&rsquo;m placed to the{" "}\n              <strong>{popper.placement}</strong>\n            </div>\n          </div>\n        )}\n      </Overlay>\n    </div>\n  );\n}\n\n<OverlayExample />;\n'))),(0,a.kt)("h2",{id:"animations"},"Animations"),(0,a.kt)("p",null,"Overlays support ",(0,a.kt)("inlineCode",{parentName:"p"},"react-transition-group")," compliant Transition components (though you are welcome to use something else)."),(0,a.kt)(i.default,{imports:function(){return(0,i.allValues)({"react-transition-group/Transition":Promise.all([t.e(592),t.e(471)]).then(t.bind(t,2745)),clsx:Promise.all([t.e(592),t.e(471)]).then(t.bind(t,6010)),"@restart/ui":Promise.all([t.e(592),t.e(471)]).then(t.bind(t,6352)),"../src/Tooltip":Promise.all([t.e(592),t.e(471)]).then(t.bind(t,2720))})},mdxType:"ImportContext"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'import Transition from "react-transition-group/Transition";\nimport clsx from "clsx";\nimport { Overlay } from "@restart/ui";\nimport Tooltip from "../src/Tooltip";\n\nfunction Fade({ children, ...props }) {\n  return (\n    <Transition\n      {...props}\n      timeout={300}\n      onEnter={(node) => {\n        // trigger a reflow\n        node.offsetWidth;\n      }}\n    >\n      {(status, innerProps) =>\n        React.cloneElement(children, {\n          ...innerProps,\n          className: clsx(\n            "transition-opacity duration-300",\n            status === "entering" || status === "entered"\n              ? "opacity-1"\n              : "opacity-0"\n          ),\n        })\n      }\n    </Transition>\n  );\n}\n\nfunction Example() {\n  const ref = useRef(null);\n  const [show, setShow] = useState(false);\n  return (\n    <>\n      <a\n        ref={ref}\n        href="#home"\n        onMouseEnter={() => setShow(true)}\n        onMouseLeave={() => setShow(false)}\n      >\n        A link with a tooltip\n      </a>\n      <Overlay\n        show={show}\n        target={ref}\n        offset={[0, 8]}\n        transition={Fade}\n        placement="top"\n      >\n        {(props, { arrowProps, popper }) => (\n          <Tooltip\n            {...props}\n            arrowProps={arrowProps}\n            popper={popper}\n          >\n            I am a tooltip\n          </Tooltip>\n        )}\n      </Overlay>\n    </>\n  );\n}\n'))))}d.isMDXComponent=!0}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXRzL2pzLzNhYTRmMWRhLjc5MzMxOTk3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktd2Vic2l0ZS9hc3NldHMvanMvM2FhNGYxZGEuNzkzMzE5OTcuanMiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9