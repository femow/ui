(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[332],{8215:(e,n,o)=>{"use strict";o.d(n,{Z:()=>r});var t=o(7294);const r=function({children:e,hidden:n,className:o}){return t.createElement("div",{role:"tabpanel",hidden:n,className:o},e)}},5064:(e,n,o)=>{"use strict";o.d(n,{Z:()=>u});var t=o(7294),r=o(9443);const a=function(){const e=(0,t.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e};var i=o(6010);const p="tabItem_1uMI",l="tabItemActive_2DSg";const s=37,d=39;const u=function(e){const{lazy:n,block:o,defaultValue:r,values:u,groupId:m,className:c}=e,{tabGroupChoices:h,setTabGroupChoices:g}=a(),[w,k]=(0,t.useState)(r),f=t.Children.toArray(e.children),b=[];if(null!=m){const e=h[m];null!=e&&e!==w&&u.some((n=>n.value===e))&&k(e)}const D=e=>{const n=e.currentTarget,o=b.indexOf(n),t=u[o].value;k(t),null!=m&&(g(m,t),setTimeout((()=>{(function(e){const{top:n,left:o,bottom:t,right:r}=e.getBoundingClientRect(),{innerHeight:a,innerWidth:i}=window;return n>=0&&r<=i&&t<=a&&o>=0})(n)||(n.scrollIntoView({block:"center",behavior:"smooth"}),n.classList.add(l),setTimeout((()=>n.classList.remove(l)),2e3))}),150))},y=e=>{var n;let o;switch(e.keyCode){case d:{const n=b.indexOf(e.target)+1;o=b[n]||b[0];break}case s:{const n=b.indexOf(e.target)-1;o=b[n]||b[b.length-1];break}}null==(n=o)||n.focus()};return t.createElement("div",{className:"tabs-container"},t.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.default)("tabs",{"tabs--block":o},c)},u.map((({value:e,label:n})=>t.createElement("li",{role:"tab",tabIndex:w===e?0:-1,"aria-selected":w===e,className:(0,i.default)("tabs__item",p,{"tabs__item--active":w===e}),key:e,ref:e=>b.push(e),onKeyDown:y,onFocus:D,onClick:D},n)))),n?(0,t.cloneElement)(f.filter((e=>e.props.value===w))[0],{className:"margin-vert--md"}):t.createElement("div",{className:"margin-vert--md"},f.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==w})))))}},9443:(e,n,o)=>{"use strict";o.d(n,{Z:()=>t});const t=(0,o(7294).createContext)(void 0)},9116:(e,n,o)=>{"use strict";o.r(n),o.d(n,{frontMatter:()=>d,contentTitle:()=>u,metadata:()=>m,toc:()=>c,default:()=>g});var t=o(2122),r=o(9756),a=(o(7294),o(3905)),i=o(8818),p=o(5064),l=o(8215),s=["components"],d={},u=void 0,m={unversionedId:"Dropdown",id:"Dropdown",isDocsHomePage:!1,title:"Dropdown",description:"Dropdown is a set of structural components for building accessible dropdown menus with close-on-click,",source:"@site/docs/Dropdown.mdx",sourceDirName:".",slug:"/Dropdown",permalink:"/ui/Dropdown",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Button",permalink:"/ui/Button"},next:{title:"Modal",permalink:"/ui/Modal"}},c=[{value:"Components",id:"components",children:[{value:"Dropdown",id:"dropdown",children:[]},{value:"Toggle",id:"toggle",children:[]},{value:"Menu",id:"menu",children:[]}]},{value:"Implementing show/hide",id:"implementing-showhide",children:[]},{value:"Different containers",id:"different-containers",children:[]}],h={toc:c};function g(e){var n=e.components,d=(0,r.Z)(e,s);return(0,a.kt)("wrapper",(0,t.Z)({},h,d,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Dropdown")," is a set of structural components for building accessible dropdown menus with close-on-click,\nkeyboard navigation, and correct focus handling. Like all of ",(0,a.kt)("inlineCode",{parentName:"p"},"@restart/ui"),"\ncomponents, it's BYOS (Bring Your Own Styles). ",(0,a.kt)("inlineCode",{parentName:"p"},"Dropdown")," is primarily\nbuilt from three base components that you should compose to build your dropdowns."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Dropdown"),": wraps the menu and toggle, and handles keyboard navigation"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Dropdown.Toggle"),": generally a button that triggers the opening of the menu"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Dropdown.Menu"),": the overlaid menu, positioned to the toggle with ",(0,a.kt)("inlineCode",{parentName:"li"},"PopperJS"))),(0,a.kt)(i.default,{imports:function(){return(0,i.allValues)({clsx:Promise.all([o.e(592),o.e(610)]).then(o.bind(o,6010)),"../src/Button":Promise.all([o.e(592),o.e(610)]).then(o.bind(o,5733)),"@restart/ui":Promise.all([o.e(592),o.e(610)]).then(o.bind(o,6352))})},mdxType:"ImportContext"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'import clsx from "clsx";\nimport Button from "../src/Button";\nimport {\n  useDropdownMenu,\n  useDropdownToggle,\n  useDropdownItem,\n  Dropdown,\n} from "@restart/ui";\n\nconst DropdownMenu = ({ role }) => {\n  const [props, { toggle, show, popper }] = useDropdownMenu(\n    {\n      flip: true,\n      offset: [0, 8],\n    }\n  );\n\n  useLayoutEffect(() => {\n    if (show) popper.update();\n  }, [show]);\n\n  return (\n    <div\n      {...props}\n      role={role}\n      className={clsx(\n        show ? "flex" : "hidden",\n        "w-48 py-2 flex-col shadow-lg border-gray-200 border bg-white z-10 rounded"\n      )}\n    >\n      <Dropdown.Item className="text-left hover:bg-primary-100 px-6 py-2 focus:ring-2 focus:outline-none">\n        Item 1\n      </Dropdown.Item>\n      <Dropdown.Item className="text-left hover:bg-primary-100 px-6 py-2 focus:ring-2 focus:outline-none">\n        Item 2\n      </Dropdown.Item>\n    </div>\n  );\n};\n\nconst DropdownToggle = ({ children }) => {\n  const [props, { show, toggle }] = useDropdownToggle();\n\n  return (\n    <Button {...props} className="caret">\n      {children}\n    </Button>\n  );\n};\n\nconst DropdownButton = ({\n  show,\n  onToggle,\n  drop,\n  alignEnd,\n  title,\n  role,\n}) => (\n  <Dropdown\n    show={show}\n    onToggle={onToggle}\n    drop={drop}\n    alignEnd={alignEnd}\n  >\n    <span>\n      <DropdownToggle>{title}</DropdownToggle>\n      <DropdownMenu role={role} />\n    </span>\n  </Dropdown>\n);\n\nfunction DropdownExample() {\n  const [show, setShow] = useState(false);\n\n  return (\n    <div className="flex justify-center space-x-5">\n      <DropdownButton\n        show={show}\n        onToggle={(nextShow) => setShow(nextShow)}\n        title={`${show ? "Close" : "Open"} Dropdown`}\n      />\n    </div>\n  );\n}\n'))),(0,a.kt)("h2",{id:"components"},"Components"),(0,a.kt)("p",null,"Dropdowns are made up of a wrapping ",(0,a.kt)("inlineCode",{parentName:"p"},"Dropdown")," component, a ",(0,a.kt)("inlineCode",{parentName:"p"},"Toggle")," that\ntriggers that menu visibility, a ",(0,a.kt)("inlineCode",{parentName:"p"},"Menu")," and the ",(0,a.kt)("inlineCode",{parentName:"p"},"Item"),"s within that menu. With the exception\nof the outer ",(0,a.kt)("inlineCode",{parentName:"p"},"Dropdown")," component, each sub component can be constructed with a component\nrender prop API or a hook depending on preference."),(0,a.kt)("h3",{id:"dropdown"},"Dropdown"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Dropdown")," component is the non-presentational orchestrator of the dropdown state.\nIt handles menu visibility, keyboard navigation and focus management. As a convenience, a\nfew ",(0,a.kt)("inlineCode",{parentName:"p"},"Menu")," specific props can be provided to ",(0,a.kt)("inlineCode",{parentName:"p"},"Dropdown")," directly, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"placement"),". It\nis sometimes helpful to also render a wrapping DOM element around your ",(0,a.kt)("inlineCode",{parentName:"p"},"Toggle")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Menu"),",\nbut not it's required."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Dropdown } from '@restart/ui';\n\n\n<Dropdown placement='top-start'>\n  <span>\n  {/* Toggle */}\n  </span>\n<Dropdown>\n")),(0,a.kt)("h3",{id:"toggle"},"Toggle"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Toggle")," is an interactive element (usually a button) that opens the dropdown menu.\nThe toggle props contain a ",(0,a.kt)("inlineCode",{parentName:"p"},"ref")," that must be passed to a valid DOM element. You\ncan pass ",(0,a.kt)("inlineCode",{parentName:"p"},"disabled")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"onClick")," props as well and they will be composed into the returned\nprops automatically."),(0,a.kt)(p.Z,{defaultValue:"hook",values:[{label:"useDropdownToggle",value:"hook"},{label:"DropdownToggle",value:"component"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"hook",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { useDropdownToggle } from "@restart/ui";\nimport { Button } from "@restart/ui";\n\nconst DropdownToggle = (props) => {\n  const [toggleProps] = useDropdownToggle(props);\n\n  return <Button {...props} {...itemProps} />;\n};\n'))),(0,a.kt)(l.Z,{value:"component",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { DropdownToggle } from "@restart/ui";\nimport { Button } from "@restart/ui";\n\nconst MyDropdownToggle = (props) => (\n  <DropdownToggle {...props}>\n    {(toggleProps, meta) => (\n      <Button {...props} {...toggleProps} />\n    )}\n  </DropdownToggle>\n);\n')))),(0,a.kt)("h3",{id:"menu"},"Menu"),(0,a.kt)("p",null,"The dropdown ",(0,a.kt)("inlineCode",{parentName:"p"},"Menu")," provides an overlay that is positioned next to the dropdown toggle.\nMenu's are positioned with ",(0,a.kt)("inlineCode",{parentName:"p"},"PopperJS")," by default, and accept all configuration options\navailable to ",(0,a.kt)("inlineCode",{parentName:"p"},"Popper"),"."),(0,a.kt)(p.Z,{defaultValue:"hook",values:[{label:"useDropdownMenu",value:"hook"},{label:"DropdownMenu",value:"component"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"hook",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { useDropdownMenu } from "@restart/ui";\nimport { Button } from "@restart/ui";\n\nconst DropdownToggle = (props) => {\n  const [menuProps, meta] = useDropdownMenu({\n    flip: true,\n    offset: [0, 8],\n  });\n\n  return (\n    <ul\n      {...props}\n      {...menuProps}\n      style={{\n        visibility: meta.show ? "visible" : "hidden ",\n      }}\n    />\n  );\n};\n'))),(0,a.kt)(l.Z,{value:"component",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { DropdownMenu } from "@restart/ui";\nimport { Button } from "@restart/ui";\n\nconst MyDropdownToggle = (props) => (\n  <DropdownMenu flip offset={[0, 8]}>\n    {(menuProps, meta) => (\n      <ul\n        {...props}\n        {...menuProps}\n        style={{\n          visibility: meta.show ? "visible" : "hidden ",\n        }}\n      />\n    )}\n  </DropdownMenu>\n);\n')))),(0,a.kt)("h2",{id:"implementing-showhide"},"Implementing show/hide"),(0,a.kt)("p",null,"Because ",(0,a.kt)("inlineCode",{parentName:"p"},"PopperJS")," must measure the ",(0,a.kt)("inlineCode",{parentName:"p"},"Menu")," element, it's recommended that you style\nthe Menu with ",(0,a.kt)("inlineCode",{parentName:"p"},"opacity: 0")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"visibility: hidden")," when not shown.\nThis allows ",(0,a.kt)("inlineCode",{parentName:"p"},"Popper")," to calculate the correct offset for the ",(0,a.kt)("inlineCode",{parentName:"p"},"Menu")," even when it's not\nvisible. This also makes it a bit simpler to animate if you desire."),(0,a.kt)("p",null,"When transitioning, it's best to use ",(0,a.kt)("strong",{parentName:"p"},"both")," ",(0,a.kt)("inlineCode",{parentName:"p"},"visibility")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"opacity"),". Setting\n",(0,a.kt)("inlineCode",{parentName:"p"},"visibility")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"hidden")," will remove the menu from the keyboard tab order, but it\ndoesn't transition nicely, so add ",(0,a.kt)("inlineCode",{parentName:"p"},"opacity")," (or some other visual property) to\nindicate fade out and in."),(0,a.kt)(i.default,{imports:function(){return(0,i.allValues)({"@restart/ui":Promise.all([o.e(592),o.e(610)]).then(o.bind(o,6352)),"../src/Button":Promise.all([o.e(592),o.e(610)]).then(o.bind(o,5733))})},mdxType:"ImportContext"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'import { Dropdown } from "@restart/ui";\nimport Button from "../src/Button";\n\n<Dropdown>\n  <Dropdown.Toggle>\n    {(props) => (\n      <Button {...props} className="caret">\n        Open\n      </Button>\n    )}\n  </Dropdown.Toggle>\n  <Dropdown.Menu flip offset={[0, 8]}>\n    {(menuProps, meta) => (\n      <ul\n        {...menuProps}\n        className="p-4 border shadow-md bg-white absolute z-10"\n        style={{\n          transition: "visibility 500ms, opacity 500ms",\n          visibility: meta.show ? "visible" : "hidden",\n          opacity: meta.show ? "1" : "0",\n        }}\n      >\n        <p>Hey there</p>\n      </ul>\n    )}\n  </Dropdown.Menu>\n</Dropdown>;\n'))),(0,a.kt)("p",null,"If the above isn't feasible and you must use ",(0,a.kt)("inlineCode",{parentName:"p"},"display: none")," to hide the menu, you\nmay need to manually trigger a position re-calculation on show when ",(0,a.kt)("inlineCode",{parentName:"p"},"Popper")," is able to\nmeasure the element."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { useDropdownMenu } from "@restart/ui";\n\nfunction Menu() {\n  const [menuProps, meta] = useDropdownMenu();\n\n  useLayoutEffect(() => {\n    meta.update()\n  }, [meta.show])\n\n  return (\n    <ul\n      {...menuProps}\n      style={{\n        display: meta.show ? "block" : "none",\n      }}\n    >\n      {...}\n    </ul>\n  );\n}\n')),(0,a.kt)("h2",{id:"different-containers"},"Different containers"),(0,a.kt)("p",null,"Dropdowns use ",(0,a.kt)("inlineCode",{parentName:"p"},"Popper")," by default to position ",(0,a.kt)("inlineCode",{parentName:"p"},"Menu"),"s to ",(0,a.kt)("inlineCode",{parentName:"p"},"Toggle"),"s. ",(0,a.kt)("inlineCode",{parentName:"p"},"Popper")," is a\npowerful positioning library that lets you easily construct ",(0,a.kt)("inlineCode",{parentName:"p"},"Dropdown")," markup to suit\nyour app's needs."),(0,a.kt)("p",null,"The example here positions the ",(0,a.kt)("inlineCode",{parentName:"p"},"Menu")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"document")," body via a ",(0,a.kt)("inlineCode",{parentName:"p"},"Portal"),"."),(0,a.kt)(i.default,{imports:function(){return(0,i.allValues)({"@restart/ui":Promise.all([o.e(592),o.e(610)]).then(o.bind(o,6352)),"../src/Button":Promise.all([o.e(592),o.e(610)]).then(o.bind(o,5733))})},mdxType:"ImportContext"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'import { Dropdown } from "@restart/ui";\nimport Button from "../src/Button";\n\n<Dropdown drop="down">\n  <Dropdown.Toggle id="example-toggle">\n    {(props) => (\n      <Button type="button" {...props}>\n        Click to open\n      </Button>\n    )}\n  </Dropdown.Toggle>\n  <Dropdown.Menu offset={[0, 12]}>\n    {(props, { show }) =>\n      ReactDOM.createPortal(\n        <div\n          {...props}\n          className={`${\n            show ? "flex" : "hidden"\n          } p-3 shadow-lg border-grey-200 bg-white z-10 rounded`}\n        >\n          <p>I am rendered into the document body</p>\n        </div>,\n        document.body\n      )\n    }\n  </Dropdown.Menu>\n</Dropdown>;\n'))))}g.isMDXComponent=!0}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXRzL2pzLzA0MTFjYzkzLmQ2MGJjZGU3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktd2Vic2l0ZS9hc3NldHMvanMvMDQxMWNjOTMuZDYwYmNkZTcuanMiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9