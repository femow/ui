(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[467],{1332:(e,n,t)=>{"use strict";t.r(n),t.d(n,{frontMatter:()=>s,contentTitle:()=>p,metadata:()=>c,toc:()=>d,default:()=>m});var r=t(2122),o=t(9756),a=(t(7294),t(3905)),i=t(8818),l=["components"],s={},p=void 0,c={unversionedId:"Portal",id:"Portal",isDocsHomePage:!1,title:"Portal",description:'The `` component renders its children into a new "subtree" outside of current component hierarchy.',source:"@site/docs/Portal.mdx",sourceDirName:".",slug:"/Portal",permalink:"/ui/Portal",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Overlay",permalink:"/ui/Overlay"},next:{title:"Waypoint",permalink:"/ui/Waypoint"}},d=[],u={toc:d};function m(e){var n=e.components,s=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},u,s,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"<Portal/>"),' component renders its children into a new "subtree" outside of current component hierarchy.\nYou can think of it as a declarative ',(0,a.kt)("inlineCode",{parentName:"p"},"appendChild()"),", or jQuery's ",(0,a.kt)("inlineCode",{parentName:"p"},"$().appendTo()"),".\nThe children of ",(0,a.kt)("inlineCode",{parentName:"p"},"<Portal/>")," component will be appended to the ",(0,a.kt)("inlineCode",{parentName:"p"},"container")," specified."),(0,a.kt)("p",null,"The component is a light wrapper around ",(0,a.kt)("inlineCode",{parentName:"p"},"React.createPortal")," with some conveniences around\nspecifying and waiting for the container element."),(0,a.kt)(i.default,{imports:function(){return(0,i.allValues)({"@restart/ui":Promise.all([t.e(592),t.e(484)]).then(t.bind(t,6352)),"../src/Button":Promise.all([t.e(592),t.e(484)]).then(t.bind(t,5733))})},mdxType:"ImportContext"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live renderAsComponent",live:!0,renderAsComponent:!0},'import { Portal } from "@restart/ui";\nimport Button from "../src/Button";\n\nconst [show, setShow] = useState(false);\nconst containerRef = useRef(null);\n\nlet child = <span>But I actually render here!</span>;\n\n<div className="flex flex-col items-center">\n  <Button type="button" onClick={() => setShow(true)}>\n    Render Child\n  </Button>\n  <div className="bg-primary-200 p-6 rounded-lg shadow my-4">\n    <span>It looks like I will render in here.</span>\n\n    <Portal container={containerRef}>\n      {show && child}\n    </Portal>\n  </div>\n\n  <div\n    className="bg-primary-200 p-6 rounded-lg shadow "\n    ref={containerRef}\n  />\n</div>;\n'))))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXRzL2pzLzUxMjk2MzA1LjdhMTk5Y2QzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktd2Vic2l0ZS9hc3NldHMvanMvNTEyOTYzMDUuN2ExOTljZDMuanMiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9